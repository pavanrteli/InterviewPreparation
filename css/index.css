/* # Types of selectors
    1. Element
    2. class
    3. ID
    4. Inline

# specificity order - inline > id > class > element */

/* # difference between rem and em
    rem - dependent on global html font size bydefault its font size is 16px 
          2rem = 32px
    em - dependent on its parent element font size if its parent element font size is 20 px then
          2em = 40px  */

    /* absolute unit - px */
    /* relative unit - rem, em, vw, vh */

/* # Pseudo code selectors

    /* visited link */
    /* a:visited {
        color: green;
    } */
    
    /* mouse over link */
    /* a:hover {
        color: hotpink;
    } */
    
    /* selected link */
    /* a:active {
        color: blue;
    } */

    /* 1. hover - on hovering it will turn into hotpink
    2. visited - once we click on the link then its color will turn into green
    3. active - when we click on link at point of time it turn to blue color and then again to normal color */ 

/* # Css styling positions
    position:relative - 
        1. It will set position relative to its normal position
        2. It will be present in the normal flow of the document
        3. there will be no overlapping

    position:absolute - 
        1. It will set position relative to its ancestor parent
        2. It will not be present in the normal flow of the document
        3. there will be overlapping

    position:sticky - 
        An element with position: sticky; is positioned based on the user's scroll position.
        A sticky element toggles between relative and fixed, depending on the scroll position. It is 
        positioned relative until a given offset position is met in the viewport - then it "sticks" in place
        (like position:fixed).

    position:fixed - 
        An element with position: fixed; is positioned relative to the viewport, which means it always 
        stays in the same place even if the page is scrolled. The top, right, bottom, and left properties
        are used to position the element. */

/* # Z-index
    z-index is used to decide the stack order of the element. It works only on positioned properties 
    and flex children.
    ex - z-index:-1 */

/* # Difference b/w flex and grid
    flex - 
        1. flexbox is 1-Dimentional
        2. it can work on one axis at a time either horizontal or vertical axis
        3. flexbox is simple compare to grid 
        4. it is mostly used in navbars or where elements flow in one direction 
        5. display:flex
    grid - 
        1. grid is 2-Dimentional
        2. it can work on both axis simultaneously
        3. grid is complex compared to flex 
        4. it is mostly used in large or complex projects
        5. display:grid */

/* # box-sizing:border-box -       
    The CSS box-sizing property allows us to include the padding and border in an element's total width
    and height. */

/* # Box model
    1. Every element in your application appears as box model.
    I will divide mox model into 5 parts
    content-every elements has to hold something which is content.
    padding-padding is space around the content 
    border-outer line of element which will highlight that element.
    margin-creating space around elements is margin
    why? box model gives layout to to the element.there are various aspects to elements in web application
    like innerspace, outerspace, padding whether element
    is centered or not so these all things we can do with the help of box model only.  */


